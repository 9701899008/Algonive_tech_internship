import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
import plotly.express as px
try:
    df = pd.read_csv("retail_sales_dataset.csv")
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("Error: 'retail_sales_dataset.csv' not found at the specified path.")
    print("Please ensure the file exists at this path or update the path in the code.")
    raise # Re-raise the exception to stop execution
except Exception as e:
    print(f"An unexpected error occurred while loading the dataset: {e}")
    raise # Re-raise the exception
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
df['date'] = pd.to_datetime(df['date'])
df = df.sort_values('date')
print("\nData Cleaning Complete.")
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['weekday'] = df['date'].dt.dayofweek
print("Feature Engineering Complete.")
# Assuming 'total_amount' is the column containing sales data after cleaning
# If the column name is different, replace 'total_amount' with the correct column name
# You can uncomment the line below to inspect column names:
# print(df.columns)
sales_column_name = 'total_amount' # Change this if your sales column has a different name
if sales_column_name not in df.columns:
     print(f"Error: Column '{sales_column_name}' not found in the DataFrame.")
     print("Available columns are:", df.columns.tolist())
     print("Please update the 'sales_column_name' variable in the code to the correct sales column.")
     raise ValueError(f"Column '{sales_column_name}' not found.")
daily_sales = df.groupby('date')[sales_column_name].sum().reset_index()
daily_sales.columns = ['ds', 'y']
print(f"Aggregated daily sales using column '{sales_column_name}'.")
print("Daily Sales Data Head:")
print(daily_sales.head())
print("\nStarting Prophet model training...")
model = Prophet()
model.fit(daily_sales)
print("Prophet model training complete.")
future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)
print("Forecast generated for the next 30 days.")
print("Generating forecast plots...")
fig1 = model.plot(forecast)
plt.title("Sales Forecast - Next 30 Days")
plt.tight_layout()
plt.show()
fig2 = model.plot_components(forecast)
plt.tight_layout()
plt.show()
print("Forecast plots displayed.")
# Ensure the directory for saving the output exists or change the path.
# For example, saving to the current directory: output_path = "sales_forecast_output.csv"
output_path = "/mnt/data/sales_forecast_output.csv" # Change this path if needed
try:
    forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv(output_path, index=False)
    print(f"âœ… Forecast saved successfully as: {output_path}")
except FileNotFoundError:
    print(f"Error: Directory for saving '{output_path}' not found.")
    print("Please ensure the directory exists or change the output_path.")
except Exception as e:
    print(f"An error occurred while saving the forecast: {e}")
